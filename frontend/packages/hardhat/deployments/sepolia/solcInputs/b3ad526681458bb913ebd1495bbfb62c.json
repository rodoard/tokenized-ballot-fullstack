{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/TokenizedBallot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface ITokenizedToken {\n    function getPastVotes(\n        address voter,\n        uint256 targetBlockNumber\n    ) external view returns (uint256);\n}\n\ncontract TokenizedBallot is Ownable {\n    ITokenizedToken public tokenizedToken;\n    uint256 public targetBlockNumber;\n    mapping(address => uint256) votePowerSpent;\n    struct Proposal {\n        bytes32 name;\n        uint voteCount;\n    }\n    modifier validProposal(uint proposal) {\n        require(proposal >0 &&proposal<= proposals.length, \"Proposal index out of range\");\n        _;\n    }\n\n    Proposal[] public proposals;\n    string public proposalType;\n    \n    struct BallotProposals {\n        string proposalType;\n         Proposal[] proposals;\n    }\n\n    constructor(\n        string memory _proposalType, \n        bytes32[] memory proposalNames,\n        ITokenizedToken _tokenizedToken\n    ) Ownable(msg.sender) {\n        proposalType = _proposalType;\n        tokenizedToken = _tokenizedToken;\n        proposals.push(Proposal({\n            name:bytes32(0),\n            voteCount:0\n        }));\n        for (uint i = 0; i < proposalNames.length; i++) {\n            proposals.push(Proposal({name: proposalNames[i], voteCount: 0}));\n        }\n    }\n\n    function setTargetBlockNumber(uint256 _targetBlockNumber) external onlyOwner {\n        require(\n            isPastBlock(_targetBlockNumber),\n            \"block number should be in the past\"\n        );\n        targetBlockNumber = _targetBlockNumber;\n    }\n\n    function vote(uint proposal, uint256 amount) public validProposal(proposal) {\n        uint256 votePower = getVotePower(msg.sender);\n        require(votePower >= amount, \"Not enough vote power\");\n        proposals[proposal].voteCount += amount;\n        votePowerSpent[msg.sender] += amount;\n    }\n\n   function voteAllIn(uint proposal) external validProposal(proposal) {\n        uint256 votePower = getVotePower(msg.sender);\n        vote(proposal, votePower);\n    }\n\n   function proposalName(uint proposal) external view validProposal(proposal) returns(bytes32) {\n     return proposals[proposal].name;\n    }\n\n    function getBallotProposals() external view returns(BallotProposals memory) {\n     return BallotProposals(\n           proposalType,\n           proposals\n     );\n    }\n\n   function numProposals() external view  returns(uint ) {\n     return proposals.length;\n    }\n\n    function winningProposal() public view returns (uint winningProposal_) {\n        uint winningVoteCount = 0;\n        for (uint p = 0; p < proposals.length; p++) {\n            if (proposals[p].voteCount > winningVoteCount) {\n                winningVoteCount = proposals[p].voteCount;\n                winningProposal_ = p;\n            }\n        }\n    }\n\n    function winnerName() external view returns (bytes32 winnerName_) {\n        winnerName_ = proposals[winningProposal()].name;\n    }\n\n    function getVotePower(address voter) public view returns (uint256) {\n        return\n            tokenizedToken.getPastVotes(voter, targetBlockNumber) -\n            votePowerSpent[voter];\n    }\n\n    function isPastBlock(uint blockNumber) public view returns (bool) {\n        return blockNumber < block.number;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}