{
  "address": "0xb00b4eA156dF8aB15977c07326731E1d6D615DBC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_proposalType",
          "type": "string"
        },
        {
          "internalType": "bytes32[]",
          "name": "proposalNames",
          "type": "bytes32[]"
        },
        {
          "internalType": "contract ITokenizedToken",
          "name": "_tokenizedToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getBallotProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "proposalType",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "name",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "voteCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct TokenizedBallot.Proposal[]",
              "name": "proposals",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct TokenizedBallot.BallotProposals",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "getVotePower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "isPastBlock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposal",
          "type": "uint256"
        }
      ],
      "name": "proposalName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_targetBlockNumber",
          "type": "uint256"
        }
      ],
      "name": "setTargetBlockNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenizedToken",
      "outputs": [
        {
          "internalType": "contract ITokenizedToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposal",
          "type": "uint256"
        }
      ],
      "name": "voteAllIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "winnerName_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winningProposal_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6efc453991300ebe67b7907cf75f4bb87e21c4f0790150d6c1bada531bd91df",
  "receipt": {
    "to": null,
    "from": "0x16e56a3e57495E5E53927Daad788d775b899885c",
    "contractAddress": "0xb00b4eA156dF8aB15977c07326731E1d6D615DBC",
    "transactionIndex": 13,
    "gasUsed": "834803",
    "logsBloom": "0x
    "blockHash": "0xee0fa19caf9b7d3648ffe3b703c1f7d280942fbf12f75697526d11dce12521a0",
    "transactionHash": "0xb6efc453991300ebe67b7907cf75f4bb87e21c4f0790150d6c1bada531bd91df",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 7149452,
        "transactionHash": "0xb6efc453991300ebe67b7907cf75f4bb87e21c4f0790150d6c1bada531bd91df",
        "address": "0xb00b4eA156dF8aB15977c07326731E1d6D615DBC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000016e56a3e57495e5e53927daad788d775b899885c"
        ],
        "data": "0x",
        "logIndex": 61,
        "blockHash": "0xee0fa19caf9b7d3648ffe3b703c1f7d280942fbf12f75697526d11dce12521a0"
      }
    ],
    "blockNumber": 7149452,
    "cumulativeGasUsed": "2919719",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Thanksgiving Cake",
    [
      "0x43686f636f6c6174650000000000000000000000000000000000000000000000",
      "0x50756d706b696e00000000000000000000000000000000000000000000000000",
      "0x436172726f740000000000000000000000000000000000000000000000000000"
    ],
    "0x76565AbB59C2Fdf1A764352B1cE990bF523E1b92"
  ],
  "numDeployments": 1,
  "solcInputHash": "b3ad526681458bb913ebd1495bbfb62c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_proposalType\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"proposalNames\",\"type\":\"bytes32[]\"},{\"internalType\":\"contract ITokenizedToken\",\"name\":\"_tokenizedToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getBallotProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"proposalType\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenizedBallot.Proposal[]\",\"name\":\"proposals\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TokenizedBallot.BallotProposals\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVotePower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"isPastBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"}],\"name\":\"proposalName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetBlockNumber\",\"type\":\"uint256\"}],\"name\":\"setTargetBlockNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenizedToken\",\"outputs\":[{\"internalType\":\"contract ITokenizedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"}],\"name\":\"voteAllIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"winnerName_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winningProposal_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenizedBallot.sol\":\"TokenizedBallot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/TokenizedBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface ITokenizedToken {\\n    function getPastVotes(\\n        address voter,\\n        uint256 targetBlockNumber\\n    ) external view returns (uint256);\\n}\\n\\ncontract TokenizedBallot is Ownable {\\n    ITokenizedToken public tokenizedToken;\\n    uint256 public targetBlockNumber;\\n    mapping(address => uint256) votePowerSpent;\\n    struct Proposal {\\n        bytes32 name;\\n        uint voteCount;\\n    }\\n    modifier validProposal(uint proposal) {\\n        require(proposal >0 &&proposal<= proposals.length, \\\"Proposal index out of range\\\");\\n        _;\\n    }\\n\\n    Proposal[] public proposals;\\n    string public proposalType;\\n    \\n    struct BallotProposals {\\n        string proposalType;\\n         Proposal[] proposals;\\n    }\\n\\n    constructor(\\n        string memory _proposalType, \\n        bytes32[] memory proposalNames,\\n        ITokenizedToken _tokenizedToken\\n    ) Ownable(msg.sender) {\\n        proposalType = _proposalType;\\n        tokenizedToken = _tokenizedToken;\\n        proposals.push(Proposal({\\n            name:bytes32(0),\\n            voteCount:0\\n        }));\\n        for (uint i = 0; i < proposalNames.length; i++) {\\n            proposals.push(Proposal({name: proposalNames[i], voteCount: 0}));\\n        }\\n    }\\n\\n    function setTargetBlockNumber(uint256 _targetBlockNumber) external onlyOwner {\\n        require(\\n            isPastBlock(_targetBlockNumber),\\n            \\\"block number should be in the past\\\"\\n        );\\n        targetBlockNumber = _targetBlockNumber;\\n    }\\n\\n    function vote(uint proposal, uint256 amount) public validProposal(proposal) {\\n        uint256 votePower = getVotePower(msg.sender);\\n        require(votePower >= amount, \\\"Not enough vote power\\\");\\n        proposals[proposal].voteCount += amount;\\n        votePowerSpent[msg.sender] += amount;\\n    }\\n\\n   function voteAllIn(uint proposal) external validProposal(proposal) {\\n        uint256 votePower = getVotePower(msg.sender);\\n        vote(proposal, votePower);\\n    }\\n\\n   function proposalName(uint proposal) external view validProposal(proposal) returns(bytes32) {\\n     return proposals[proposal].name;\\n    }\\n\\n    function getBallotProposals() external view returns(BallotProposals memory) {\\n     return BallotProposals(\\n           proposalType,\\n           proposals\\n     );\\n    }\\n\\n   function numProposals() external view  returns(uint ) {\\n     return proposals.length;\\n    }\\n\\n    function winningProposal() public view returns (uint winningProposal_) {\\n        uint winningVoteCount = 0;\\n        for (uint p = 0; p < proposals.length; p++) {\\n            if (proposals[p].voteCount > winningVoteCount) {\\n                winningVoteCount = proposals[p].voteCount;\\n                winningProposal_ = p;\\n            }\\n        }\\n    }\\n\\n    function winnerName() external view returns (bytes32 winnerName_) {\\n        winnerName_ = proposals[winningProposal()].name;\\n    }\\n\\n    function getVotePower(address voter) public view returns (uint256) {\\n        return\\n            tokenizedToken.getPastVotes(voter, targetBlockNumber) -\\n            votePowerSpent[voter];\\n    }\\n\\n    function isPastBlock(uint blockNumber) public view returns (bool) {\\n        return blockNumber < block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x5b3f0e0beeea6c6da73c2bd583d617e921d98d78cf5296cfe71a9eff6ff5b2b3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000fd738038062000fd78339810160408190526200003491620002be565b33806200005b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b620000668162000180565b5060056200007584826200043d565b50600180546001600160a01b0319166001600160a01b03831617815560408051808201909152600080825260208201818152600480549485018155825291517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b60029094029384015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c909201919091555b825181101562000176576004604051806040016040528085848151811062000135576200013562000509565b602090810291909101810151825260009181018290528354600181810186559483529181902083516002909302019182559190910151908201550162000109565b505050506200051f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620002115762000211620001d0565b604052919050565b600082601f8301126200022b57600080fd5b815160206001600160401b03821115620002495762000249620001d0565b8160051b6200025a828201620001e6565b92835284810182019282810190878511156200027557600080fd5b83870192505b8483101562000296578251825291830191908301906200027b565b979650505050505050565b80516001600160a01b0381168114620002b957600080fd5b919050565b600080600060608486031215620002d457600080fd5b83516001600160401b0380821115620002ec57600080fd5b818601915086601f8301126200030157600080fd5b815181811115620003165762000316620001d0565b60206200032c601f8301601f19168201620001e6565b82815289828487010111156200034157600080fd5b60005b838110156200036157858101830151828201840152820162000344565b5060009281018201929092528701519095509150808211156200038357600080fd5b50620003928682870162000219565b925050620003a360408501620002a1565b90509250925092565b600181811c90821680620003c157607f821691505b602082108103620003e257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000438576000816000526020600020601f850160051c81016020861015620004135750805b601f850160051c820191505b8181101562000434578281556001016200041f565b5050505b505050565b81516001600160401b03811115620004595762000459620001d0565b62000471816200046a8454620003ac565b84620003e8565b602080601f831160018114620004a95760008415620004905750858301515b600019600386901b1c1916600185901b17855562000434565b600085815260208120601f198616915b82811015620004da57888601518255948401946001909101908401620004b9565b5085821015620004f95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b610aa8806200052f6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806375b5a74b116100a2578063bb9c092011610071578063bb9c09201461021b578063cbb2a14c1461022e578063e2ba53f014610241578063eb6cea5214610249578063f2fde38b1461025e57600080fd5b806375b5a74b146101c15780638da5cb5b146101d4578063b384abef146101e5578063b6c63018146101f857600080fd5b8063400e3949116100de578063400e39491461017e5780634502863414610186578063609ff1bd146101b1578063715018a6146101b957600080fd5b8063013cf08b146101105780632a8cd29e1461013d57806332da83e814610154578063351d9f9614610169575b600080fd5b61012361011e366004610865565b610271565b604080519283526020830191909152015b60405180910390f35b61014660025481565b604051908152602001610134565b610167610162366004610865565b61029f565b005b610171610311565b60405161013491906108c4565b600454610146565b600154610199906001600160a01b031681565b6040516001600160a01b039091168152602001610134565b61014661039f565b610167610412565b6101676101cf366004610865565b610426565b6000546001600160a01b0316610199565b6101676101f33660046108de565b610471565b61020b610206366004610865565b431190565b6040519015158152602001610134565b610146610229366004610900565b610558565b61014661023c366004610865565b6105f6565b610146610655565b610251610688565b6040516101349190610929565b61016761026c366004610900565b6107aa565b6004818154811061028157600080fd5b60009182526020909120600290910201805460019091015490915082565b6102a76107e8565b6102b081431190565b61030c5760405162461bcd60e51b815260206004820152602260248201527f626c6f636b206e756d6265722073686f756c6420626520696e207468652070616044820152611cdd60f21b60648201526084015b60405180910390fd5b600255565b6005805461031e9061099c565b80601f016020809104026020016040519081016040528092919081815260200182805461034a9061099c565b80156103975780601f1061036c57610100808354040283529160200191610397565b820191906000526020600020905b81548152906001019060200180831161037a57829003601f168201915b505050505081565b600080805b60045481101561040d5781600482815481106103c2576103c26109d0565b906000526020600020906002020160010154111561040557600481815481106103ed576103ed6109d0565b90600052602060002090600202016001015491508092505b6001016103a4565b505090565b61041a6107e8565b6104246000610815565b565b8060008111801561043957506004548111155b6104555760405162461bcd60e51b8152600401610303906109e6565b600061046033610558565b905061046c8382610471565b505050565b8160008111801561048457506004548111155b6104a05760405162461bcd60e51b8152600401610303906109e6565b60006104ab33610558565b9050828110156104f55760405162461bcd60e51b81526020600482015260156024820152742737ba1032b737bab3b4103b37ba32903837bbb2b960591b6044820152606401610303565b8260048581548110610509576105096109d0565b906000526020600020906002020160010160008282546105299190610a33565b9091555050336000908152600360205260408120805485929061054d908490610a33565b909155505050505050565b6001600160a01b03818116600081815260036020526040808220546001546002549251630748d63560e31b81526004810195909552602485019290925291939192911690633a46b1a890604401602060405180830381865afa1580156105c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e69190610a46565b6105f09190610a5f565b92915050565b60008160008111801561060b57506004548111155b6106275760405162461bcd60e51b8152600401610303906109e6565b6004838154811061063a5761063a6109d0565b90600052602060002090600202016000015491505b50919050565b6000600461066161039f565b81548110610671576106716109d0565b906000526020600020906002020160000154905090565b60408051808201909152606080825260208201526040518060400160405280600580546106b49061099c565b80601f01602080910402602001604051908101604052809291908181526020018280546106e09061099c565b801561072d5780601f106107025761010080835404028352916020019161072d565b820191906000526020600020905b81548152906001019060200180831161071057829003601f168201915b505050505081526020016004805480602002602001604051908101604052809291908181526020016000905b8282101561079f57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610759565b505050915250919050565b6107b26107e8565b6001600160a01b0381166107dc57604051631e4fbdf760e01b815260006004820152602401610303565b6107e581610815565b50565b6000546001600160a01b031633146104245760405163118cdaa760e01b8152336004820152602401610303565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561087757600080fd5b5035919050565b6000815180845260005b818110156108a457602081850181015186830182015201610888565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006108d7602083018461087e565b9392505050565b600080604083850312156108f157600080fd5b50508035926020909101359150565b60006020828403121561091257600080fd5b81356001600160a01b03811681146108d757600080fd5b60006020808352835160408083860152610946606086018361087e565b86840151868203601f19016040880152805180835290850193506000918501905b808310156109905784518051835286015186830152938501936001929092019190830190610967565b50979650505050505050565b600181811c908216806109b057607f821691505b60208210810361064f57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252601b908201527f50726f706f73616c20696e646578206f7574206f662072616e67650000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156105f0576105f0610a1d565b600060208284031215610a5857600080fd5b5051919050565b818103818111156105f0576105f0610a1d56fea26469706673582212205838e1210d85de8a5bac46fbf58ddd129ee07eb1844f050344d57c35b58a311c64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806375b5a74b116100a2578063bb9c092011610071578063bb9c09201461021b578063cbb2a14c1461022e578063e2ba53f014610241578063eb6cea5214610249578063f2fde38b1461025e57600080fd5b806375b5a74b146101c15780638da5cb5b146101d4578063b384abef146101e5578063b6c63018146101f857600080fd5b8063400e3949116100de578063400e39491461017e5780634502863414610186578063609ff1bd146101b1578063715018a6146101b957600080fd5b8063013cf08b146101105780632a8cd29e1461013d57806332da83e814610154578063351d9f9614610169575b600080fd5b61012361011e366004610865565b610271565b604080519283526020830191909152015b60405180910390f35b61014660025481565b604051908152602001610134565b610167610162366004610865565b61029f565b005b610171610311565b60405161013491906108c4565b600454610146565b600154610199906001600160a01b031681565b6040516001600160a01b039091168152602001610134565b61014661039f565b610167610412565b6101676101cf366004610865565b610426565b6000546001600160a01b0316610199565b6101676101f33660046108de565b610471565b61020b610206366004610865565b431190565b6040519015158152602001610134565b610146610229366004610900565b610558565b61014661023c366004610865565b6105f6565b610146610655565b610251610688565b6040516101349190610929565b61016761026c366004610900565b6107aa565b6004818154811061028157600080fd5b60009182526020909120600290910201805460019091015490915082565b6102a76107e8565b6102b081431190565b61030c5760405162461bcd60e51b815260206004820152602260248201527f626c6f636b206e756d6265722073686f756c6420626520696e207468652070616044820152611cdd60f21b60648201526084015b60405180910390fd5b600255565b6005805461031e9061099c565b80601f016020809104026020016040519081016040528092919081815260200182805461034a9061099c565b80156103975780601f1061036c57610100808354040283529160200191610397565b820191906000526020600020905b81548152906001019060200180831161037a57829003601f168201915b505050505081565b600080805b60045481101561040d5781600482815481106103c2576103c26109d0565b906000526020600020906002020160010154111561040557600481815481106103ed576103ed6109d0565b90600052602060002090600202016001015491508092505b6001016103a4565b505090565b61041a6107e8565b6104246000610815565b565b8060008111801561043957506004548111155b6104555760405162461bcd60e51b8152600401610303906109e6565b600061046033610558565b905061046c8382610471565b505050565b8160008111801561048457506004548111155b6104a05760405162461bcd60e51b8152600401610303906109e6565b60006104ab33610558565b9050828110156104f55760405162461bcd60e51b81526020600482015260156024820152742737ba1032b737bab3b4103b37ba32903837bbb2b960591b6044820152606401610303565b8260048581548110610509576105096109d0565b906000526020600020906002020160010160008282546105299190610a33565b9091555050336000908152600360205260408120805485929061054d908490610a33565b909155505050505050565b6001600160a01b03818116600081815260036020526040808220546001546002549251630748d63560e31b81526004810195909552602485019290925291939192911690633a46b1a890604401602060405180830381865afa1580156105c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e69190610a46565b6105f09190610a5f565b92915050565b60008160008111801561060b57506004548111155b6106275760405162461bcd60e51b8152600401610303906109e6565b6004838154811061063a5761063a6109d0565b90600052602060002090600202016000015491505b50919050565b6000600461066161039f565b81548110610671576106716109d0565b906000526020600020906002020160000154905090565b60408051808201909152606080825260208201526040518060400160405280600580546106b49061099c565b80601f01602080910402602001604051908101604052809291908181526020018280546106e09061099c565b801561072d5780601f106107025761010080835404028352916020019161072d565b820191906000526020600020905b81548152906001019060200180831161071057829003601f168201915b505050505081526020016004805480602002602001604051908101604052809291908181526020016000905b8282101561079f57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610759565b505050915250919050565b6107b26107e8565b6001600160a01b0381166107dc57604051631e4fbdf760e01b815260006004820152602401610303565b6107e581610815565b50565b6000546001600160a01b031633146104245760405163118cdaa760e01b8152336004820152602401610303565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561087757600080fd5b5035919050565b6000815180845260005b818110156108a457602081850181015186830182015201610888565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006108d7602083018461087e565b9392505050565b600080604083850312156108f157600080fd5b50508035926020909101359150565b60006020828403121561091257600080fd5b81356001600160a01b03811681146108d757600080fd5b60006020808352835160408083860152610946606086018361087e565b86840151868203601f19016040880152805180835290850193506000918501905b808310156109905784518051835286015186830152938501936001929092019190830190610967565b50979650505050505050565b600181811c908216806109b057607f821691505b60208210810361064f57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252601b908201527f50726f706f73616c20696e646578206f7574206f662072616e67650000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156105f0576105f0610a1d565b600060208284031215610a5857600080fd5b5051919050565b818103818111156105f0576105f0610a1d56fea26469706673582212205838e1210d85de8a5bac46fbf58ddd129ee07eb1844f050344d57c35b58a311c64736f6c63430008160033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/TokenizedBallot.sol:TokenizedBallot",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 196,
        "contract": "contracts/TokenizedBallot.sol:TokenizedBallot",
        "label": "tokenizedToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITokenizedToken)191"
      },
      {
        "astId": 198,
        "contract": "contracts/TokenizedBallot.sol:TokenizedBallot",
        "label": "targetBlockNumber",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 202,
        "contract": "contracts/TokenizedBallot.sol:TokenizedBallot",
        "label": "votePowerSpent",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 229,
        "contract": "contracts/TokenizedBallot.sol:TokenizedBallot",
        "label": "proposals",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Proposal)207_storage)dyn_storage"
      },
      {
        "astId": 231,
        "contract": "contracts/TokenizedBallot.sol:TokenizedBallot",
        "label": "proposalType",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Proposal)207_storage)dyn_storage": {
        "base": "t_struct(Proposal)207_storage",
        "encoding": "dynamic_array",
        "label": "struct TokenizedBallot.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITokenizedToken)191": {
        "encoding": "inplace",
        "label": "contract ITokenizedToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)207_storage": {
        "encoding": "inplace",
        "label": "struct TokenizedBallot.Proposal",
        "members": [
          {
            "astId": 204,
            "contract": "contracts/TokenizedBallot.sol:TokenizedBallot",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 206,
            "contract": "contracts/TokenizedBallot.sol:TokenizedBallot",
            "label": "voteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}